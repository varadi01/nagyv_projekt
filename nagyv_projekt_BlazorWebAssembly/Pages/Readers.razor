@page "/readers"


@inject HttpClient Http

<PageTitle>Readers</PageTitle>

<h1>Manage Readers</h1>

<div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Add new reader</Button>
        <Modal @ref="saveModal" title="Add new reader" IsVerticallyCentered="true">
            <BodyTemplate>
                <form>
                    <label>Full name</label><br/>
                    <InputText @bind-Value="@_cReader.Name"></InputText>
                    <br/>
                    <label>Address</label><br/>
                    <InputText @bind-Value="@_cReader.Address"></InputText>
                    <br/>
                    <label>Birth date</label><br/>
                    <InputDate  @bind-Value="@_cReader.BirthDate" Min="@_nineteenoo.ToString("yyyy-MM-dd")" ></InputDate>
                    <br/>
                </form>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="SaveReader">Save</Button>
            </FooterTemplate>
        </Modal>
        <Modal @ref="editModal" title="Update reader" IsVerticallyCentered="true">
            <BodyTemplate>
                <form>
                    <label>Full name</label><br/>
                    <InputText @bind-Value="@_eReader.Name"></InputText>
                    <br/>
                    <label>Address</label><br/>
                    <InputText @bind-Value="@_eReader.Address"></InputText>
                    <br/>
                </form>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="EditReader">Update</Button>

            </FooterTemplate>
        </Modal>


        <Modal @ref="viewLentBooksModal" title="Add new book" IsVerticallyCentered="true" Size="ModalSize.Large">
            <BodyTemplate>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Accession ID</th>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Year published</th>
                        <th>Publisher</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var b in _lentBooks)
                    {
                        <tr>
                            <td>@b.BookID</td>
                            <td>@b.Title</td>
                            <td>@b.Author</td>
                            <td>@b.Year</td>
                            <td>@b.Publisher</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideLentBooksModalClick">Close</Button>
            </FooterTemplate>
        </Modal>
    </div>
    <div>
        <InputText @bind-Value="@_searchString"></InputText>
        <Button Color="ButtonColor.Primary" @onclick="fetchReaders">List Readers</Button>

    </div>
    <div>
        @if (readers is { Count: 0 })
        {
            if (_searchString != "")
            {
                <p>
                    No readers found with that name.
                </p>
            }
            else
            {
                <p>
                    Use "List Readers" to list all readers with names matching the specified string.
                </p>
            }
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Reader ID</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Birth date</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var r in readers)
                {
                    <tr>
                        <td>@r.ReaderId</td>
                        <td>@r.Name</td>
                        <td>@r.Address</td>
                        <td>@r.BirthDate.ToShortDateString()</td>
                        <td>
                            <Button Color="ButtonColor.Success" @onclick="@((() =>
                                                                            {
                                                                                _eReader = r;
                                                                                _eReader.Lendings = [];
                                                                              OnShowEditModalClick();
                                                                          }))">
                                Update
                            </Button>
                            <Button Color="ButtonColor.Info" @onclick="(() => ShowLentBooks(r.ReaderId))">See borrowed books</Button>
                            <Button Color="ButtonColor.Danger" @onclick="@(() => RemoveReader(r))">Remove</Button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code

{
    [Inject] ModalService ModalService { get; set; } = default!;

    private DateTime _nineteenoo = new DateTime( 1900, 1, 1, 0, 0, 0, DateTimeKind.Utc );

    private string? _searchString = "";

    private ReaderUITO _cReader = new ReaderUITO();
    private Modal saveModal = default!;

    private Modal viewLentBooksModal = default!;
    private List<BookUITO> _lentBooks = new List<BookUITO>();
    
    private class BookUITO
    {
        public Guid BookID { get; set; }

        public string Title { get; set; }

        public string Author { get; set; }

        public string Publisher { get; set; }

        public int Year { get; set; }
    }
    
    private async Task OnShowLentBooksModalClick()
    {
        await viewLentBooksModal.ShowAsync();
    }

    private async Task OnHideLentBooksModalClick()
    {
        await viewLentBooksModal.HideAsync();
    }

    private async Task OnShowModalClick()
    {
        await saveModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await saveModal.HideAsync();
    }

    //make this dataannotated?
    private class ReaderUITO
    {
        public Guid ReaderId { get; set; }
        
        public string Name { get; set; }
        
        public string Address { get; set; }

        public DateOnly BirthDate { get; set; } = DateOnly.FromDateTime(new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc));

        public ICollection<Borrowings.BorrowingUITO> Lendings { get; set; } = new List<Borrowings.BorrowingUITO>(); //temporary?
    }

    private async void SaveReader()
    {
        await Http.PostAsJsonAsync("http://localhost:5169/reader/add", _cReader); 
        await OnHideModalClick();
        _cReader = new ReaderUITO();
    }

    private ReaderUITO _eReader = new ReaderUITO();
    private Modal editModal = default!;

    private async Task OnShowEditModalClick()
    {
        await editModal.ShowAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await editModal.HideAsync();
    }

    private async void EditReader()
    {
        await Http.PutAsJsonAsync("http://localhost:5169/reader/update", _eReader); 
        await OnHideEditModalClick();
        _eReader = new ReaderUITO();
    }

    private List<ReaderUITO>? readers = new();

    private async void ShowLentBooks(Guid rid)
    {
        _lentBooks = await Http.GetFromJsonAsync<List<BookUITO>>("http://localhost:5169/lending/getLent/" + rid);
        await OnShowLentBooksModalClick();
    }
    
    private async void fetchReaders()
    {
        if (_searchString == "")
        {
            var foundReader = await Http.GetFromJsonAsync<List<ReaderUITO>>("http://localhost:5169/reader/getAll");
            if (foundReader != null && foundReader.Any())
            {
                readers = foundReader;
            }
            else
            {
                readers = [];
            }
        }
        else
        {
            var foundReaders = await Http.GetFromJsonAsync<List<ReaderUITO>>($"http://localhost:5169/reader/getByName/" + _searchString);
            if (foundReaders != null && foundReaders.Any())
            {
                readers = foundReaders;
            }
            else
            {
                readers = [];
            }
        }
    }
    
    private async void RemoveReader(ReaderUITO reader)
    {
        await Http.DeleteAsync("http://localhost:5169/reader/delete/" + reader.ReaderId); 
    }
}