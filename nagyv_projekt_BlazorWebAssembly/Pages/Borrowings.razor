@page "/borrowings"



@inject HttpClient Http

<PageTitle>Lendings</PageTitle>

<h1>Manage lendings</h1>
<div>    
    <div>
        <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Add new lending</Button>
        <Modal @ref="saveModal" title="Add new reader" IsVerticallyCentered="true">
            <BodyTemplate>
                <form>
                    <label>Reader ID</label><br/>
                    <InputText @bind-Value="@_readerGuidString"></InputText>
                    <br/>
                    <label>Book Accession ID</label><br/>
                    <InputText @bind-Value="@_bookGuidString"></InputText>
                    <br/>
                    <label>Lending date</label><br/>
                    <InputDate  @bind-Value="@_cBorrowing.LendingDate" Min="@DateTime.UtcNow.ToString("yyyy-MM-dd")" ></InputDate>
                    <br/>
                    <label>Return date</label><br/>
                    <InputDate  @bind-Value="@_cBorrowing.ReturnDate" Min="@DateTime.UtcNow.AddDays(1).ToString("yyyy-MM-dd")" ></InputDate> 
                    <br/>
                </form>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="SaveLending">Save</Button>
            </FooterTemplate>
        </Modal>
        <Modal @ref="editModal" title="Update reader" IsVerticallyCentered="true">
            <BodyTemplate>
                <form>
                    <label>Return date</label><br/>
                    <InputDate  @bind-Value="@_cBorrowing.ReturnDate" Min="@_eBorrowing.LendingDate.ToString("yyyy-MM-dd")" ></InputDate>
                    <br/>
                </form>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="EditLending">Update</Button>
            </FooterTemplate>
        </Modal>

    </div>
    <div>
        <InputText @bind-Value="@_searchString"></InputText>
        <Button Color="ButtonColor.Primary" @onclick="fetchLendings">List lendings</Button>

    </div>
    <div>
        @if (borrowings is { Count: 0 })
        {
            if (_searchString != "")
            {
                <p>Specified reader has no lendings, or does not exist</p>
            }
            else
            {
                <p>Use "List lendings" to see all lendings, or specify a reader ID to see that readers lendings</p>
            }
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Reader</th>
                    <th>Book</th>
                    <th>Lending date</th>
                    <th>Return date</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var b in borrowings)
                {
                    <tr>
                        <td>@b.ReaderId</td>
                        <td>@b.BookId</td>
                        <td>@b.LendingDate.ToShortDateString()</td>
                        <td>@b.ReturnDate.ToShortDateString()</td>
                        <td>
                            <Button Color="ButtonColor.Success" @onclick="@((() => {
                                                                                _eBorrowing = b;
                                                                              OnShowEditModalClick();
                                                                          }))">
                                Update
                            </Button>
                            <Button Color="ButtonColor.Danger" @onclick="@(() => RemoveReader(b))">Remove</Button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>
@code

{
    [Inject] ModalService ModalService { get; set; } = default!;

    private DateTime _nineteenoo = new DateTime( 1900, 1, 1, 0, 0, 0, DateTimeKind.Utc );

    private string? _searchString = "";

    private string? _readerGuidString;
    private string? _bookGuidString;

    private BorrowingUITO _cBorrowing = new BorrowingUITO();
    private Modal saveModal = default!;

    private async Task OnShowModalClick()
    {
        await saveModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await saveModal.HideAsync();
    }

    //make this dataannotated?
    public class BorrowingUITO
    {
        public Guid Id {get; set;}

        public Guid ReaderId {get; set;}

        public Guid BookId {get; set;}

        public DateOnly LendingDate { get; set; } = DateOnly.FromDateTime(DateTime.UtcNow);
        
        public DateOnly ReturnDate {get; set;}  = DateOnly.FromDateTime(DateTime.UtcNow.AddDays(7));
    }

    private async void SaveLending()
    {
        Guid.TryParse(_readerGuidString, out var rid);
        _cBorrowing.ReaderId = rid;

        Guid.TryParse(_bookGuidString, out var bid);
        _cBorrowing.BookId = bid;

        if (_cBorrowing.ReturnDate <= _cBorrowing.LendingDate)
        {
            //cant be returned before lent
            return;
        }

        if (_cBorrowing.BookId == Guid.Empty || _cBorrowing.ReaderId == Guid.Empty)
        {
            return;
        }

        await Http.PostAsJsonAsync("http://localhost:5169/lending/lend", _cBorrowing);
        await OnHideModalClick();
    }

    private BorrowingUITO _eBorrowing = new BorrowingUITO();
    private Modal editModal = default!;

    private async Task OnShowEditModalClick()
    {
        await editModal.ShowAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await editModal.HideAsync();
    }

    private async void EditLending()
    {
        await Http.PutAsJsonAsync("http://localhost:5169/lending/update", _eBorrowing);
        await OnHideEditModalClick();
    }

    private List<BorrowingUITO>? borrowings = new();

    private async void fetchLendings()
    {
        if (_searchString == "")
        {
            var foundLendings = await Http.GetFromJsonAsync<List<BorrowingUITO>>("http://localhost:5169/lending/getAll");
            if (foundLendings != null && foundLendings.Any())
            {
                borrowings = foundLendings;
            }
            else
            {
                borrowings = [];
            }
        }
        else
        {
            //TODO if _searchString cant be parsed into a proper guid we oof
            //TODO this doesent work on mutiple levels
            var foundLendings = await Http.GetFromJsonAsync<List<BorrowingUITO>>($"http://localhost:5169/lending/get/" + _searchString);
            if (foundLendings != null && foundLendings.Any())
            {
                borrowings = foundLendings;
            }
            else
            {
                borrowings = [];
            }
        }
    }

    private async void RemoveReader(BorrowingUITO lending)
    {
        await Http.DeleteAsync("http://localhost:5169/lending/delete/" + lending.Id);
    }
}